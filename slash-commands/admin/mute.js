const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder } = require('discord.js');
const { footer } = require('../../../config');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('mute')
        .setDescription('üîá Mute m·ªôt th√†nh vi√™n trong m·ªôt kho·∫£ng th·ªùi gian.')
        .addUserOption(option =>
            option.setName('thanhvien')
                .setDescription('Ch·ªçn th√†nh vi√™n c·∫ßn mute')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('thoigian')
                .setDescription('Th·ªùi gian mute (v√≠ d·ª•: 10m, 1h)')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('lydo')
                .setDescription('L√Ω do mute')
                .setRequired(false)),
    category: 'admin',

    async execute(interaction) {
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
            return interaction.reply('B·∫°n kh√¥ng c√≥ quy·ªÅn mute th√†nh vi√™n.');
        }

        const user = interaction.options.getMember('thanhvien');
        const time = interaction.options.getString('thoigian');
        const reason = interaction.options.getString('lydo') || 'Kh√¥ng c√≥ l√Ω do';

        if (!user) {
            return interaction.reply('Kh√¥ng t√¨m th·∫•y th√†nh vi√™n.');
        }

        const milliseconds = ms(time);
        if (!milliseconds) {
            return interaction.reply('Vui l√≤ng ch·ªâ ƒë·ªãnh th·ªùi gian h·ª£p l·ªá (v√≠ d·ª•: 10m, 1h).');
        }

        user.timeout(milliseconds, reason)
            .then(() => {
                const embed = new EmbedBuilder()
                    .setColor(0xffa500)
                    .setTitle(`üîá Th√†nh vi√™n ${user.user.username} ƒë√£ b·ªã mute`)
                    .addFields(
                        { name: 'üÜî T√™n Discord', value: `${user}`, inline: true },
                        { name: 'üî¢ ID Th√†nh vi√™n', value: `${user.id}`, inline: true },
                        { name: '‚è∞ Th·ªùi gian', value: formatTime(time), inline: true },
                        { name: 'üìÑ L√Ω do', value: reason }
                    )
                    .setFooter({ text: `${footer.text} ${footer.version}`, iconURL: footer.icon_url || interaction.client.user.displayAvatarURL()});
                interaction.reply({ embeds: [embed] });
            })
            .catch(error => {
                console.error(error);
                interaction.reply('ƒê√£ x·∫£y ra l·ªói khi mute th√†nh vi√™n.');
            });
    },
};

function ms(time) {
    const match = time.match(/^(\d+)([smhd])$/);
    if (!match) return null;

    const amount = parseInt(match[1], 10);
    const unit = match[2];

    switch (unit) {
        case 's': return amount * 1000;
        case 'm': return amount * 60 * 1000;
        case 'h': return amount * 60 * 60 * 1000;
        case 'd': return amount * 24 * 60 * 60 * 1000;
        default: return null;
    }
}

function formatTime(time) {
    const match = time.match(/^(\d+)([smhd])$/);
    if (!match) return 'Kh√¥ng x√°c ƒë·ªãnh';

    const amount = parseInt(match[1], 10);
    const unit = match[2];

    switch (unit) {
        case 's': return `${amount} gi√¢y`;
        case 'm': return `${amount} ph√∫t`;
        case 'h': return `${amount} gi·ªù`;
        case 'd': return `${amount} ng√†y`;
        default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
}